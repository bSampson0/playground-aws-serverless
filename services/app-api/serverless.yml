# Refer to this service's README to configure all required SSM parameters.
service: app-api

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-associate-waf
  - serverless-offline
  - serverless-stack-termination-protection
  - serverless-idempotency-helper
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-online
  - serverless-api-client-certificate
  - serverless-iam-roles-per-function
  - "@enterprise-cmcs/serverless-waf-plugin"

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - master
      - val
      - production
  tableName: ${env:AMENDMENTS_TABLE_NAME, cf:database-${self:custom.stage}.AmendmentsTableName}
  tableArn: ${env:AMENDMENTS_TABLE_ARN, cf:database-${self:custom.stage}.AmendmentsTableArn}
  atomicCounterTableName: ${env:AMENDMENTS_COUNTER_TABLE_NAME, cf:database-${self:custom.stage}.AmendmentsAtomicCounterTableName}
  atomicCounterTableArn: ${env:AMENDMENTS_COUNTER_TABLE_ARN, cf:database-${self:custom.stage}.AmendmentsAtomicCounterTableArn}
  webAclName: ${self:custom.stage}-${self:service}-webacl
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  serverlessApiClientCertificate:
    rotateCerts: true
    daysLeft: 30
  warmup:
    default:
      enabled: true
      prewarm: true
      events:
        - schedule: rate(${ssm:/configuration/${self:custom.stage}/warmup/schedule, ssm:/configuration/default/warmup/schedule, "4 minutes"})
      concurrency: ${ssm:/configuration/${self:custom.stage}/warmup/concurrency, ssm:/configuration/default/warmup/concurrency, 5}
  serverless-iam-roles-per-function:
    defaultInherit: true

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
  environment:
    tableName: ${self:custom.tableName}
    atomicCounterTableName: ${self:custom.atomicCounterTableName}

functions:
  create:
    handler: handlers/create.main
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - ${self:custom.tableArn}
          - ${self:custom.atomicCounterTableArn}
    events:
      - http:
          path: amendments
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: handlers/get.main
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource:
          - ${self:custom.tableArn}
    events:
      - http:
          path: amendments/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: handlers/list.main
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - ${self:custom.tableArn}
    events:
      - http:
          path: amendments
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: handlers/update.main
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource:
          - ${self:custom.tableArn}
    events:
      - http:
          path: amendments/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: handlers/delete.main
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
          - ${self:custom.tableArn}
    events:
      - http:
          path: amendments/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
